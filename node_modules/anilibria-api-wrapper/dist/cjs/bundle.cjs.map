{"version":3,"file":"bundle.cjs","sources":["../../src/api/anilibria.config.ts","../../src/helpers/query-params-string/queryParamsString.ts","../../src/utils/get-anilibria-data/getAnilibriaData.ts","../../src/api/anilibria.ts","../../src/api/methods/get-anilibria-title/getAnilibriaTitle.ts","../../src/api/methods/get-anilibria-titles/getAnilibriaTitles.ts","../../src/api/methods/get-anilibria-updates/getAnilibriaUpdates.ts","../../src/api/methods/get-anilibria-changes/getAnilibriaChanges.ts","../../src/api/methods/get-anilibria-schedule/getAnilibriaSchedule.ts","../../src/api/methods/get-anilibria-caching-nodes/getAnilibriaCachingNodes.ts","../../src/api/methods/get-anilibria-random-title/getAnilibriaRandomTitle.ts","../../src/api/methods/get-anilibria-youtube/getAnilibriaYouTube.ts","../../src/api/methods/get-anilibria-feed/getAnilibriaFeed.ts","../../src/api/methods/get-anilibria-years/getAnilibriaYears.ts","../../src/api/methods/get-anilibria-genres/getAnilibriaGenres.ts","../../src/api/methods/get-anilibria-team/getAnilibriaTeam.ts","../../src/api/methods/get-anilibria-seed-stats/getAnilibriaSeedStats.ts","../../src/api/methods/get-anilibria-rss/getAnilibriaRss.ts","../../src/api/methods/anilibria-search-titles/anilibriaSearchTitles.ts","../../src/api/methods/anilibria-advanced-search/anilibriaAdvancedSearch.ts"],"sourcesContent":["export const ANILIBRIA_API_URI_BY_DEFAULT = 'https://api.anilibria.tv/v2'\r\n","import { QueryObject, StringQueryParamsObject } from './queryParamsString.types'\r\n\r\nexport const queryParamsString = (queryParamsObject: QueryObject) => {\r\n\tconst stringQueryParamsObject: StringQueryParamsObject = {}\r\n\tconst queryString = new URLSearchParams()\r\n\r\n\tfor (const key in queryParamsObject) {\r\n\t\tstringQueryParamsObject[key] = String(queryParamsObject[key]).split(',')\r\n\t\tqueryString.set(key, stringQueryParamsObject[key].join(','))\r\n\t}\r\n\r\n\tconst questionSymbol = queryString.toString().length > 0 ? '?' : ''\r\n\treturn `${questionSymbol}${queryString.toString()}`\r\n}\r\n","import axios, { AxiosInstance, AxiosStatic } from 'axios'\r\n\r\nimport {\r\n\tQueryObject,\r\n\tqueryParamsString\r\n} from '../../helpers/query-params-string'\r\nimport { ANILIBRIA_API_URI_BY_DEFAULT } from '../../api/anilibria.config.js'\r\nimport { GetDataReturn } from './getAnilibriaData.types'\r\n\r\nexport const getAnilibriaData = async <T>(\r\n\tmethod: string,\r\n\tqueryParams: QueryObject = {},\r\n\taxiosInstance: AxiosStatic | AxiosInstance = axios\r\n): Promise<GetDataReturn<T>> => {\r\n\ttry {\r\n\t\tconst url =\r\n\t\t\tANILIBRIA_API_URI_BY_DEFAULT + method + queryParamsString(queryParams)\r\n\t\tconst response = await axiosInstance.get<T>(url)\r\n\r\n\t\treturn {\r\n\t\t\tdata: response.data,\r\n\t\t\turl: {\r\n\t\t\t\tfull: url,\r\n\t\t\t\tqueryParams,\r\n\t\t\t\tanilibriaMethod: method\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import axios, { AxiosInstance, AxiosStatic } from 'axios'\r\n\r\nimport { ANILIBRIA_API_URI_BY_DEFAULT } from './anilibria.config'\r\nimport { AnilibriaOptions } from './anilibria.types'\r\nimport { GetAnilibriaTitleQueryParams } from './methods/get-anilibria-title'\r\nimport { GetAnilibriaTitlesQueryParams } from './methods/get-anilibria-titles'\r\nimport { GetAnilibriaUpdatesQueryParams } from './methods/get-anilibria-updates'\r\nimport { GetAnilibriaChangesQueryParams } from './methods/get-anilibria-changes'\r\nimport { GetAnilibriaScheduleQueryParams } from './methods/get-anilibria-schedule'\r\nimport { GetAnilibriaRandomTitleQueryParams } from './methods/get-anilibria-random-title'\r\nimport { GetAnilibriaYouTubeQueryParams } from './methods/get-anilibria-youtube'\r\nimport {\r\n\tGetAnilibriaFeedQueryParams,\r\n\tGetAnilibriaFeedReturn\r\n} from './methods/get-anilibria-feed'\r\nimport {\r\n\tGetAnilibriaSeedStatsQueryParams,\r\n\tGetAnilibriaSeedStatsReturn\r\n} from './methods/get-anilibria-seed-stats'\r\nimport { GetAnilibriaRssQueryParams } from './methods/get-anilibria-rss'\r\nimport { AnilibriaSearchTitlesQueryParams } from './methods/anilibria-search-titles'\r\nimport { AnilibriaAdvancedSearchQueryParams } from './methods/anilibria-advanced-search'\r\nimport { GetAnilibriaTeamReturn } from './methods/get-anilibria-team'\r\nimport { getAnilibriaData } from '../utils'\r\nimport { Schedule, YouTube, Title } from './types'\r\n\r\nexport class Anilibria {\r\n\tprivate _url: string = ANILIBRIA_API_URI_BY_DEFAULT\r\n\tpublic get url() {\r\n\t\treturn this._url\r\n\t}\r\n\tpublic set url(newUrl: string) {\r\n\t\tif (newUrl.endsWith('/')) {\r\n\t\t\tthis._url = newUrl.slice(0, newUrl.length - 1)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis._url = newUrl\r\n\t}\r\n\r\n\tprivate readonly _axiosInstance: AxiosStatic | AxiosInstance = axios\r\n\r\n\tconstructor(options: AnilibriaOptions = {}) {\r\n\t\tif (options.url) this.url = options.url\r\n\t\tif (options.axiosOptions)\r\n\t\t\tthis._axiosInstance = axios.create(options.axiosOptions)\r\n\t}\r\n\r\n\tpublic async getTitle(params: GetAnilibriaTitleQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title>(\r\n\t\t\t\t'/getTitle',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getTitles(params: GetAnilibriaTitlesQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title[]>(\r\n\t\t\t\t'/getTitles',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getUpdates(params: GetAnilibriaUpdatesQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title[]>(\r\n\t\t\t\t'/getUpdates',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getChanges(params: GetAnilibriaChangesQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title[]>(\r\n\t\t\t\t'/getChanges',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getSchedule(params: GetAnilibriaScheduleQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Schedule[]>(\r\n\t\t\t\t'/getSchedule',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getRandomTitle(params: GetAnilibriaRandomTitleQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title>(\r\n\t\t\t\t'/getRandomTitle',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getYouTube(params: GetAnilibriaYouTubeQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<YouTube[]>(\r\n\t\t\t\t'/getYouTube',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getFeed(params: GetAnilibriaFeedQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<GetAnilibriaFeedReturn[]>(\r\n\t\t\t\t'/getFeed',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getYears() {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<number[]>(\r\n\t\t\t\t'/getYears',\r\n\t\t\t\t{},\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getGenres() {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<string[]>(\r\n\t\t\t\t'/getGenres',\r\n\t\t\t\t{},\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getCachingNodes() {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<string[]>(\r\n\t\t\t\t'/getCachingNodes',\r\n\t\t\t\t{},\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getTeam() {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<GetAnilibriaTeamReturn>(\r\n\t\t\t\t'/getTeam',\r\n\t\t\t\t{},\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getSeedStats(params: GetAnilibriaSeedStatsQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<GetAnilibriaSeedStatsReturn[]>(\r\n\t\t\t\t'/getSeedStats',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getRss(params: GetAnilibriaRssQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<string>(\r\n\t\t\t\t'/getRSS',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async searchTitles(params: AnilibriaSearchTitlesQueryParams = {}) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title[]>(\r\n\t\t\t\t'/searchTitles',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async advancedSearch(params: AnilibriaAdvancedSearchQueryParams) {\r\n\t\ttry {\r\n\t\t\treturn await getAnilibriaData<Title[]>(\r\n\t\t\t\t'/advancedSearch',\r\n\t\t\t\tparams,\r\n\t\t\t\tthis._axiosInstance\r\n\t\t\t)\r\n\t\t} catch (error) {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types/title'\r\nimport { GetAnilibriaTitleQueryParams } from './getAnilibriaTitle.types'\r\n\r\nexport const getAnilibriaTitle = async (\r\n\tparams: GetAnilibriaTitleQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title>('/getTitle', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types/title'\r\nimport { GetAnilibriaTitlesQueryParams } from './getAnilibriaTitles.types'\r\n\r\nexport const getAnilibriaTitles = async (\r\n\tparams: GetAnilibriaTitlesQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title[]>('/getTitles', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaUpdatesQueryParams } from './getAnilibriaUpdates.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types/title'\r\n\r\nexport const getAnilibriaUpdates = async (\r\n\tparams: GetAnilibriaUpdatesQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title[]>('/getUpdates', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaChangesQueryParams } from './getAnilibriaChanges.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types'\r\n\r\nexport const getAnilibriaChanges = async (\r\n\tparams: GetAnilibriaChangesQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title[]>('/getChanges', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaScheduleQueryParams } from './getAnilibriaSchedule.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Schedule } from '../../types'\r\n\r\nexport const getAnilibriaSchedule = async (\r\n\tparams: GetAnilibriaScheduleQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Schedule[]>('/getSchedule', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\n\r\nexport const getAnilibriaCachingNodes = async () => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<string[]>('/getCachingNodes')\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaRandomTitleQueryParams } from './getAnilibriaRandomTitle.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types'\r\n\r\nexport const getAnilibriaRandomTitle = async (\r\n\tparams: GetAnilibriaRandomTitleQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title>('/getRandomTitle', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaYouTubeQueryParams } from './getAnilibriaYouTube.types'\r\nimport { getAnilibriaData } from '../../../utils/get-anilibria-data'\r\nimport { YouTube } from '../../types/youtube'\r\n\r\nexport const getAnilibriaYouTube = async (\r\n\tparams: GetAnilibriaYouTubeQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<YouTube[]>('/getYouTube', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import {\r\n\tGetAnilibriaFeedQueryParams,\r\n\tGetAnilibriaFeedReturn\r\n} from './getAnilibriaFeed.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\n\r\nexport const getAnilibriaFeed = async (\r\n\tparams: GetAnilibriaFeedQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<GetAnilibriaFeedReturn[]>('/getFeed', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { Years } from '../../types/years'\r\n\r\nexport const getAnilibriaYears = async () => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Years>('/getYears')\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { GetAnilibriaGenresQueryParams } from './getAnilibriaGenres.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Genres } from '../../types'\r\n\r\nexport const getAnilibriaGenres = async (\r\n\tparams: GetAnilibriaGenresQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Genres>('/getGenres', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { GetAnilibriaTeamReturn } from './getAnilibriaTeam.types'\r\n\r\nexport const getAnilibriaTeam = async () => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<GetAnilibriaTeamReturn>('/getTeam')\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport {\r\n\tGetAnilibriaSeedStatsQueryParams,\r\n\tGetAnilibriaSeedStatsReturn\r\n} from './getAnilibriaSeedStats.types'\r\n\r\nexport const getAnilibriaSeedStats = async (\r\n\tparams: GetAnilibriaSeedStatsQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<GetAnilibriaSeedStatsReturn[]>(\r\n\t\t\t'/getSeedStats',\r\n\t\t\tparams\r\n\t\t)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { GetAnilibriaRssQueryParams } from './getAnilibriaRss.types'\r\n\r\nexport const getAnilibriaRss = async (\r\n\tparams: GetAnilibriaRssQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<string>('/getRSS', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { AnilibriaSearchTitlesQueryParams } from './anilibriaSearchTitles.types'\r\nimport { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types'\r\n\r\nexport const anilibriaSearchTitles = async (\r\n\tparams: AnilibriaSearchTitlesQueryParams = {}\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title[]>('/searchTitles', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n","import { getAnilibriaData } from '../../../utils'\r\nimport { Title } from '../../types'\r\nimport { AnilibriaAdvancedSearchQueryParams } from './anilibriaAdvancedSearch.types'\r\n\r\nexport const anilibriaAdvancedSearch = async (\r\n\tparams: AnilibriaAdvancedSearchQueryParams\r\n) => {\r\n\ttry {\r\n\t\treturn await getAnilibriaData<Title[]>('/advancedSearch', params)\r\n\t} catch (error) {\r\n\t\tthrow error\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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"}